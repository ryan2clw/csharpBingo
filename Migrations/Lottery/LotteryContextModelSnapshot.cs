// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaBingo.Helpers;

namespace SpaBingo.Migrations.Lottery
{
    [DbContext(typeof(LotteryContext))]
    partial class LotteryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<int?>("AssignedStaffID");

                    b.Property<bool?>("CanMakeDeposits");

                    b.Property<bool?>("CanMakeWithdraws");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("ExternalCustomerID");

                    b.Property<int>("FranchiseID");

                    b.Property<string>("InactiveReason");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastSeenHostName");

                    b.Property<string>("LastSeenIPAddress");

                    b.Property<DateTime?>("LastSeenOn");

                    b.Property<int?>("MarkedInactiveByStaffID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.CustomerAccount", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountUnderReviewReason");

                    b.Property<string>("AccountUnderReviewReasonDetails");

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressLine3");

                    b.Property<string>("AddressLine4");

                    b.Property<bool?>("AddressService_MatchingAddressesFound");

                    b.Property<bool?>("AddressService_StaffOverrodeFoundAddress");

                    b.Property<DateTime?>("AddressVerified");

                    b.Property<string>("AffiliateExtraData");

                    b.Property<int?>("AffiliateID");

                    b.Property<DateTime?>("AgeVerificationOverridden");

                    b.Property<int?>("AgeVerificationOverriddenStaffID");

                    b.Property<DateTime?>("AgeVerified");

                    b.Property<int?>("ApprovedByStaffID");

                    b.Property<DateTime?>("ApprovedOn");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("CardID");

                    b.Property<string>("CellPhone");

                    b.Property<string>("CellPhoneStripped");

                    b.Property<DateTime?>("CellPhoneVerified");

                    b.Property<string>("Country");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("CustomerID");

                    b.Property<int?>("CustomerID1");

                    b.Property<string>("DenialReason");

                    b.Property<int?>("DeniedByStaffID");

                    b.Property<DateTime?>("DeniedOn");

                    b.Property<DateTime?>("DocumentationVerified");

                    b.Property<string>("EmailAddress");

                    b.Property<DateTime?>("EmailAddressVerified");

                    b.Property<string>("Employer");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<Guid>("Guid");

                    b.Property<string>("ImportNotes");

                    b.Property<string>("ImportedIdentifier");

                    b.Property<bool>("IsAccountUnderReview");

                    b.Property<bool>("IsDocumentationVerified");

                    b.Property<bool>("IsDomestic");

                    b.Property<bool>("IsExemptFromDocumentVerification");

                    b.Property<bool>("IsExemptFromLocationChecks");

                    b.Property<bool>("IsRequiringPasswordUpdate");

                    b.Property<bool>("IsTOTPRequired");

                    b.Property<bool>("IsTermsExplained");

                    b.Property<bool>("IsTestCustomer");

                    b.Property<bool>("IsWalletApplicationTestCustomer");

                    b.Property<string>("LastName");

                    b.Property<int?>("LimitID");

                    b.Property<string>("Locality");

                    b.Property<int?>("MediaCodeID");

                    b.Property<int?>("ModifiedByStaffID");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<bool>("OptIn_Important");

                    b.Property<bool>("OptIn_Marketing");

                    b.Property<string>("PINHash");

                    b.Property<string>("PINSalt");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumberStripped");

                    b.Property<DateTime?>("PhoneNumberVerified");

                    b.Property<string>("Postcode");

                    b.Property<string>("Prefix");

                    b.Property<string>("Region");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int?>("SelfImposedLimitID");

                    b.Property<string>("Suffix");

                    b.Property<bool>("Syndicate_HadFreeSyndicate");

                    b.Property<int?>("SystemImposedLimitID");

                    b.Property<string>("TOTPUserKey");

                    b.Property<byte[]>("Timestamp");

                    b.Property<long?>("TransactionIDOfFirstCustomerDeposit");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID1");

                    b.HasIndex("LimitID");

                    b.ToTable("CustomerAccount");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.CustomerAccounts_Exclusions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CancellationRequestApprovedByStaffID");

                    b.Property<DateTime?>("CancellationRequestApprovedOn");

                    b.Property<string>("CancellationRequestDenialReason");

                    b.Property<int?>("CancellationRequestDeniedByStaffID");

                    b.Property<DateTime?>("CancellationRequestDeniedOn");

                    b.Property<long>("CustomerAccountID");

                    b.Property<DateTime?>("CustomerRequestedCancellationOn");

                    b.Property<int?>("ExcludedByStaffID");

                    b.Property<DateTime?>("ExclusionEndedOn");

                    b.Property<DateTime?>("ExclusionEndsOn");

                    b.Property<DateTime>("ExclusionStartsOn");

                    b.Property<bool>("IsPermittedToWithdrawFunds");

                    b.Property<bool>("IsRequiredToWithdrawAllFunds");

                    b.Property<bool>("IsSelfExcluded");

                    b.Property<string>("Notes");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("CustomerAccountID");

                    b.ToTable("CustomerAccounts_Exclusions");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.CustomerBalance", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Balance");

                    b.Property<int>("BalanceTypeID");

                    b.Property<int?>("BonusEventID");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("CustomerAccountID");

                    b.Property<int?>("CustomerBalanceTypeID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int?>("RewardLevelID");

                    b.Property<DateTime?>("StartCheckDate");

                    b.Property<byte[]>("Timestamp");

                    b.Property<long?>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerAccountID");

                    b.HasIndex("CustomerBalanceTypeID");

                    b.ToTable("CustomerBalance");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.CustomerBalanceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool>("IsDisplayed");

                    b.Property<decimal?>("MaxLimitAmount");

                    b.Property<string>("Name");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.ToTable("CustomerBalanceType");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Customer_Billing_Queue", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CanceledByStaffID");

                    b.Property<DateTime?>("CanceledOn");

                    b.Property<string>("CanceledReason");

                    b.Property<DateTime?>("CompletedOn");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FranchiseID");

                    b.Property<DateTime?>("PeriodIntendedDate");

                    b.Property<int>("QueueTypeID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<DateTime?>("StartedOn");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.ToTable("Customer_Billing_Queue");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Customer_Billing_Queue_Detail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal?>("ConversionRate");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("CustomerAccountID");

                    b.Property<long>("Customer_Billing_QueueID");

                    b.Property<bool>("IsManualPayment");

                    b.Property<long?>("OrderDetailID");

                    b.Property<long?>("PeriodID");

                    b.Property<long?>("PoolID");

                    b.Property<long?>("PrepTransactionID");

                    b.Property<DateTime?>("ProcessedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<string>("ResponseMessage");

                    b.Property<string>("ResponseStatus");

                    b.Property<int?>("ShareCount");

                    b.Property<long?>("SyndicateOrderID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<long?>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerAccountID");

                    b.HasIndex("Customer_Billing_QueueID");

                    b.ToTable("Customer_Billing_Queue_Detail");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Drawing", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoPostingInactiveReason");

                    b.Property<bool>("CanBeAutoPosted");

                    b.Property<DateTime?>("CloseDT");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CustomLookupKey");

                    b.Property<DateTime>("DrawingDT");

                    b.Property<int>("FranchiseID");

                    b.Property<int>("GameTypeID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPosted");

                    b.Property<DateTime>("OriginalDrawsOn");

                    b.Property<DateTime?>("PostedAtDT");

                    b.Property<int?>("PostedByStaffID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<DateTime?>("StartDT");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("TimezoneIANA");

                    b.Property<int?>("TimezoneID");

                    b.Property<DateTime?>("UnpostedAtDT");

                    b.Property<int?>("UnpostedByStaffID");

                    b.Property<bool?>("WasAutoPosted");

                    b.Property<string>("WeekAndYearCode");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.HasIndex("GameTypeID");

                    b.ToTable("Drawing");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.FormFields_ConfigurationSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExtraInfo");

                    b.Property<string>("FieldName");

                    b.Property<int>("FormID");

                    b.Property<int>("FranchiseID");

                    b.Property<int?>("GeneralDomainID");

                    b.Property<bool>("IsDisplayed");

                    b.Property<bool>("IsRequired");

                    b.Property<bool>("IsUnique");

                    b.Property<int?>("MinLength");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.HasIndex("GeneralDomainID");

                    b.ToTable("FormFields_ConfigurationSettings");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Franchise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ASPCustomerApplicationID");

                    b.Property<string>("ATMCardParsingRegex");

                    b.Property<bool>("AllowFractionalBets");

                    b.Property<bool>("CanMakeCustomerDeposits");

                    b.Property<bool>("CanMakeCustomerWithdraws");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CurrencyCulture");

                    b.Property<string>("DefaultLanguage");

                    b.Property<string>("Denominations");

                    b.Property<int?>("DepositWithdrawFranchiseID");

                    b.Property<string>("FilterCustomersByCountry");

                    b.Property<bool>("Gaming_UsesBonusBalance");

                    b.Property<bool>("Gaming_UsesBonusBalanceBeforeCashBalance");

                    b.Property<bool>("Gaming_UsesCashBalance");

                    b.Property<string>("InactiveReason");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsIncludedInReports");

                    b.Property<bool>("IsPayoutByOrderDetail");

                    b.Property<bool>("IsSwipeRequired");

                    b.Property<int?>("LimitID");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<int?>("OrderValidDays");

                    b.Property<decimal?>("Payouts_DailyPayoutMaximumThreshold");

                    b.Property<Guid>("ReplicationID");

                    b.Property<bool>("SysopOnly");

                    b.Property<int?>("SystemLimitID");

                    b.Property<string>("TicketFooter");

                    b.Property<string>("TicketHeader");

                    b.Property<string>("TicketLogo");

                    b.Property<string>("TimeZone");

                    b.Property<string>("TimeZoneName");

                    b.Property<string>("TimeZoneOffset");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("TimezoneIANA");

                    b.Property<bool>("UseDaylightSavingsTime");

                    b.Property<string>("WalletType");

                    b.Property<string>("Wallet_APIAuthentication");

                    b.Property<string>("Wallet_APIURL");

                    b.Property<string>("Wallet_Currency");

                    b.HasKey("ID");

                    b.HasIndex("LimitID");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.GameType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvancedPlayLimit");

                    b.Property<string>("AutoPostingInactiveReason");

                    b.Property<int?>("CreatedByID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("InactiveReason");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAutoPostingEnabled");

                    b.Property<bool>("IsDisplayed");

                    b.Property<string>("Name");

                    b.Property<int?>("OrderLineItemLimit");

                    b.Property<int>("PayoutWindowInDays");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<int?>("TranslationID");

                    b.HasKey("ID");

                    b.ToTable("GameType");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_Lottery_BallLimits", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("B1");

                    b.Property<string>("B10");

                    b.Property<string>("B2");

                    b.Property<string>("B3");

                    b.Property<string>("B4");

                    b.Property<string>("B5");

                    b.Property<string>("B6");

                    b.Property<string>("B7");

                    b.Property<string>("B8");

                    b.Property<string>("B9");

                    b.Property<long?>("CreatedByID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("FranchiseID");

                    b.Property<string>("Games_Lottery_GameTypesID");

                    b.Property<string>("LottoGameTypeID");

                    b.Property<int?>("OrderSourceID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<decimal?>("TotalLimit");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.HasIndex("Games_Lottery_GameTypesID");

                    b.ToTable("Games_Lottery_BallLimits");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_Lottery_Drawings", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AutoPostLastAttemptedAt");

                    b.Property<string>("B1");

                    b.Property<string>("B10");

                    b.Property<string>("B11");

                    b.Property<string>("B12");

                    b.Property<string>("B13");

                    b.Property<string>("B14");

                    b.Property<string>("B15");

                    b.Property<string>("B16");

                    b.Property<string>("B17");

                    b.Property<string>("B18");

                    b.Property<string>("B19");

                    b.Property<string>("B2");

                    b.Property<string>("B20");

                    b.Property<string>("B3");

                    b.Property<string>("B4");

                    b.Property<string>("B5");

                    b.Property<string>("B6");

                    b.Property<string>("B7");

                    b.Property<string>("B8");

                    b.Property<string>("B9");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("DrawingID");

                    b.Property<long?>("Games_Lottery_Drawings_GroupID");

                    b.Property<long?>("Games_Lottery_GamesID");

                    b.Property<long>("LotteryGameID");

                    b.Property<decimal>("PayoutFactor");

                    b.Property<Guid>("ReplicationID");

                    b.Property<string>("SortedBallString");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("UnsortedBallString");

                    b.HasKey("ID");

                    b.HasIndex("DrawingID");

                    b.HasIndex("Games_Lottery_Drawings_GroupID");

                    b.HasIndex("Games_Lottery_GamesID");

                    b.ToTable("Games_Lottery_Drawings");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_Lottery_Drawings_Group", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.ToTable("Games_Lottery_Drawings_Group");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_Lottery_GameTypes", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<bool>("AllowBoxedBets");

                    b.Property<bool>("AllowStraightBets");

                    b.Property<string>("AllowedBallCountsOnOrder");

                    b.Property<string>("AutoPostInactiveReason");

                    b.Property<bool>("CanAutoPost");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Denominations");

                    b.Property<string>("DependentOnGameTypeID");

                    b.Property<int?>("DrawingTimeOffsetMinutes");

                    b.Property<string>("EstimatedJackpot");

                    b.Property<decimal?>("ExtraPlayAddedAmount");

                    b.Property<short?>("Fractions");

                    b.Property<int>("GameTypeID");

                    b.Property<int?>("Games_Lottery_ExternalLottery_ID");

                    b.Property<int?>("Games_Lottery_GameTypeGroup_ID");

                    b.Property<int?>("Games_Lottery_LotteryProviderGameType_ID");

                    b.Property<string>("ImageID");

                    b.Property<string>("ImageURL");

                    b.Property<string>("InactiveReason");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAffectedByDST");

                    b.Property<bool>("IsDisplayed");

                    b.Property<short?>("JackpotGroupID");

                    b.Property<short?>("JackpotID");

                    b.Property<string>("LocalDrawingTimezoneIANA");

                    b.Property<int?>("LocalDrawingTimezoneID");

                    b.Property<string>("LotteryType");

                    b.Property<string>("Name");

                    b.Property<int?>("OrderValidDays");

                    b.Property<int?>("PermutationCount");

                    b.Property<Guid>("ReplicationID");

                    b.Property<bool>("RequiresUniqueBalls");

                    b.Property<long?>("ScheduleGroupID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<int?>("TranslationID");

                    b.HasKey("ID");

                    b.ToTable("Games_Lottery_GameTypes");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_Lottery_Games", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedBallCountsOnOrder");

                    b.Property<string>("AutoPostingInactiveReason");

                    b.Property<byte>("BallCount");

                    b.Property<byte?>("BallCountOnOrder");

                    b.Property<bool>("CanBeAutoPosted");

                    b.Property<int?>("CloseTimeOffset_Minutes");

                    b.Property<string>("ClosesAtTime");

                    b.Property<string>("ClosesAtTime_DST");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Denominations");

                    b.Property<string>("Dependent_LotteryGameTypeID");

                    b.Property<bool>("DrawingOnFriday");

                    b.Property<bool>("DrawingOnMonday");

                    b.Property<bool>("DrawingOnSaturday");

                    b.Property<bool>("DrawingOnSunday");

                    b.Property<bool>("DrawingOnThursday");

                    b.Property<bool>("DrawingOnTuesday");

                    b.Property<bool>("DrawingOnWednesday");

                    b.Property<string>("DrawsAtTime");

                    b.Property<string>("DrawsAtTime_DST");

                    b.Property<int?>("ExtraBallCount");

                    b.Property<int?>("ExtraBallCountOnOrder");

                    b.Property<int?>("ExtraBallMaximumNumberPerBall");

                    b.Property<int?>("ExtraBallMinimumNumberPerBall");

                    b.Property<decimal?>("ExtraPlayAddedAmount");

                    b.Property<short?>("Fractions");

                    b.Property<int>("FranchiseID");

                    b.Property<int?>("Games_Lottery_ExternalLottery_ID");

                    b.Property<string>("Games_Lottery_GameTypesID");

                    b.Property<long?>("Games_Lottery_Games_GroupsID");

                    b.Property<decimal?>("Grading_HighPercentage");

                    b.Property<decimal?>("Grading_LowPercentage");

                    b.Property<string>("InactiveReason");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDependentOnGame");

                    b.Property<bool>("IsDisplayed");

                    b.Property<bool>("IsManuallyCreated");

                    b.Property<short?>("JackpotGroupID");

                    b.Property<short?>("JackpotID");

                    b.Property<string>("LotteryGameTypeID");

                    b.Property<string>("LotteryType");

                    b.Property<decimal?>("MaxBetLimit");

                    b.Property<decimal?>("MaximumAmountPerBet");

                    b.Property<byte?>("MaximumBallCountOnOrder");

                    b.Property<int>("MaximumNumberPerBall");

                    b.Property<decimal?>("MinimumAmountPerBet");

                    b.Property<byte?>("MinimumBallCountOnOrder");

                    b.Property<int>("MinimumNumberPerBall");

                    b.Property<string>("NumberProviderIdentifier");

                    b.Property<decimal?>("OddsOfWinning");

                    b.Property<int?>("OrderValidDays");

                    b.Property<decimal>("PayoutFactor");

                    b.Property<decimal?>("PayoutFactor2");

                    b.Property<decimal?>("PayoutFactor3");

                    b.Property<Guid>("ReplicationID");

                    b.Property<long?>("ScheduleGroupID");

                    b.Property<int?>("StartTimeOffset_Minutes");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.HasIndex("Games_Lottery_GameTypesID");

                    b.ToTable("Games_Lottery_Games");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_ProgressiveJackpots_Queue", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("DrawingID");

                    b.Property<short>("JackpotID");

                    b.Property<long?>("OrderID");

                    b.Property<long?>("RelatedToTransactionID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<long?>("TransactionID");

                    b.Property<long?>("TransactionsID");

                    b.HasKey("ID");

                    b.HasIndex("TransactionID");

                    b.HasIndex("TransactionsID");

                    b.ToTable("Games_ProgressiveJackpots_Queue");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.GeneralDomain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int?>("GeneralDomain2ID");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentID");

                    b.HasKey("ID");

                    b.HasIndex("GeneralDomain2ID");

                    b.ToTable("GeneralDomain");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Limit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplyChangesToLimitID");

                    b.Property<long?>("CreatedByCustomerID");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("LimitCanBeAppliedOn");

                    b.Property<string>("Name");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.ToTable("Limit");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.LimitDetail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Frequency");

                    b.Property<int>("LimitID");

                    b.Property<int>("LimitTypeID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("LimitID");

                    b.HasIndex("LimitTypeID");

                    b.ToTable("LimitDetail");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.LimitType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.ToTable("LimitType");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Media_Code_Groups", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<int>("FranchiseID");

                    b.Property<string>("GroupKey");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.ToTable("Media_Code_Groups");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Media_Codes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CallCenterCosts");

                    b.Property<int?>("ChangedByStaffID");

                    b.Property<DateTime?>("ChangedOn");

                    b.Property<string>("Circulation");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FranchiseID");

                    b.Property<decimal?>("FreeLineCosts");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MediaCode");

                    b.Property<int?>("MediaCodeGroupID");

                    b.Property<decimal?>("MediaCosts");

                    b.Property<string>("MediaTitle");

                    b.Property<string>("PartnerName");

                    b.Property<decimal?>("PrintCosts");

                    b.Property<DateTime?>("PublicationDate");

                    b.Property<Guid>("ReplicationID");

                    b.Property<string>("Selection");

                    b.Property<string>("TeaserProduct");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("Version");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.ToTable("Media_Codes");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Order", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanNotBeVoided");

                    b.Property<DateTime?>("CanNotBeVoidedCreatedOn");

                    b.Property<string>("CanNotBeVoidedReason");

                    b.Property<long?>("ChainedFromOrderID");

                    b.Property<long?>("ClientOrderID");

                    b.Property<int?>("CreatedByID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("CustomersID");

                    b.Property<int?>("FranchiseID");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsOnPaymentPlan");

                    b.Property<bool>("IsPostedOffline");

                    b.Property<bool?>("IsReplayTicket");

                    b.Property<bool>("IsSystemVoid");

                    b.Property<bool>("IsVoid");

                    b.Property<int?>("LastChangedByID");

                    b.Property<DateTime?>("LastChangedOn");

                    b.Property<int?>("LocationID");

                    b.Property<string>("LotterySoftwareVersion");

                    b.Property<int>("OrderSourceID");

                    b.Property<Guid?>("PaymentPlanGUID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int?>("StaffID");

                    b.Property<int?>("ThirdPartyID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<decimal?>("TotalPrice");

                    b.Property<decimal>("TotalTaxCharged");

                    b.Property<decimal>("TotalTaxPercentage");

                    b.HasKey("ID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("FranchiseID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.OrderBundle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FranchiseID");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.ToTable("OrderBundle");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.OrderBundle_Detail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("Games_Lottery_GamesID");

                    b.Property<bool>("IsBoxed");

                    b.Property<string>("Name");

                    b.Property<int>("OrderBundleID");

                    b.Property<decimal?>("PriceForPayout");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int?>("SyndicateID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Games_Lottery_GamesID");

                    b.HasIndex("OrderBundleID");

                    b.HasIndex("SyndicateID");

                    b.ToTable("OrderBundle_Detail");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.OrderDetails_Lottery", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("B1");

                    b.Property<string>("B10");

                    b.Property<string>("B11");

                    b.Property<string>("B12");

                    b.Property<string>("B13");

                    b.Property<string>("B14");

                    b.Property<string>("B15");

                    b.Property<string>("B16");

                    b.Property<string>("B17");

                    b.Property<string>("B18");

                    b.Property<string>("B19");

                    b.Property<string>("B2");

                    b.Property<string>("B20");

                    b.Property<string>("B21");

                    b.Property<string>("B22");

                    b.Property<string>("B23");

                    b.Property<string>("B24");

                    b.Property<string>("B25");

                    b.Property<string>("B3");

                    b.Property<string>("B4");

                    b.Property<string>("B5");

                    b.Property<string>("B6");

                    b.Property<string>("B7");

                    b.Property<string>("B8");

                    b.Property<string>("B9");

                    b.Property<int>("BetCount");

                    b.Property<short?>("CountOfCombinations");

                    b.Property<short?>("CountOfMatches");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("DrawingID");

                    b.Property<string>("ExtraData");

                    b.Property<decimal?>("FractionalPrice");

                    b.Property<int?>("Games_Lottery_Bigball_Payout_ID");

                    b.Property<bool>("IsBoxed");

                    b.Property<bool>("IsComped");

                    b.Property<bool>("IsJackpotWinner");

                    b.Property<bool>("IsLoss");

                    b.Property<bool>("IsPaid");

                    b.Property<bool>("IsRefunded");

                    b.Property<bool>("IsWinner");

                    b.Property<DateTime?>("LastChangedOn");

                    b.Property<int?>("OrderBundleID");

                    b.Property<int?>("OrderBundle_DetailID");

                    b.Property<Guid?>("OrderBundle_Guid");

                    b.Property<long>("OrderID");

                    b.Property<string>("OrderedOnBehalfOfCellNumber");

                    b.Property<string>("OrderedOnBehalfOfFullName");

                    b.Property<long?>("OrdersID");

                    b.Property<decimal?>("Payout");

                    b.Property<decimal>("PayoutTaxCharged");

                    b.Property<decimal>("PayoutTaxPercentage");

                    b.Property<decimal>("Price");

                    b.Property<string>("ReasonComped");

                    b.Property<Guid>("ReplicationID");

                    b.Property<bool>("ShouldBeRefunded");

                    b.Property<string>("SortedBallString");

                    b.Property<decimal>("TaxCharged");

                    b.Property<decimal>("TaxPercentage");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("UnsortedBallString");

                    b.HasKey("ID");

                    b.HasIndex("DrawingID");

                    b.HasIndex("OrderBundle_DetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("OrdersID");

                    b.ToTable("OrderDetails_Lottery");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.OrderDetails_Product", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsComped");

                    b.Property<DateTime?>("LastChangedOn");

                    b.Property<int?>("OrderBundleID");

                    b.Property<int?>("OrderBundle_DetailID");

                    b.Property<Guid?>("OrderBundle_Guid");

                    b.Property<long>("OrderID");

                    b.Property<decimal>("Price");

                    b.Property<int>("Quantity");

                    b.Property<string>("ReasonComped");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int?>("SyndicateID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<long?>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("OrderBundle_DetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("SyndicateID");

                    b.HasIndex("TransactionID");

                    b.ToTable("OrderDetails_Product");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Orders", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanNotBeVoided");

                    b.Property<DateTime?>("CanNotBeVoidedCreatedOn");

                    b.Property<string>("CanNotBeVoidedReason");

                    b.Property<long?>("ChainedFromOrderID");

                    b.Property<long?>("ClientOrderID");

                    b.Property<int?>("CreatedByID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("CustomersID");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsOnPaymentPlan");

                    b.Property<bool>("IsPostedOffline");

                    b.Property<bool?>("IsReplayTicket");

                    b.Property<bool>("IsSystemVoid");

                    b.Property<bool>("IsVoid");

                    b.Property<int?>("LastChangedByID");

                    b.Property<DateTime?>("LastChangedOn");

                    b.Property<int?>("LocationID");

                    b.Property<string>("LotterySoftwareVersion");

                    b.Property<int>("OrderSourceID");

                    b.Property<Guid>("PaymentPlanGUID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int?>("StaffID");

                    b.Property<int?>("ThirdPartyID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<decimal?>("TotalPrice");

                    b.Property<decimal>("TotalTaxCharged");

                    b.Property<decimal>("TotalTaxPercentage");

                    b.HasKey("ID");

                    b.HasIndex("CustomersID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Promotion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("InternalName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PromotionName");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Promotion_Franchises", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfigurationID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FranchiseID");

                    b.Property<int>("PromotionID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.HasIndex("PromotionID");

                    b.ToTable("Promotion_Franchises");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Promotions_EventBonusing_EventTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanBePercent");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("InternalName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAllowedMultiple");

                    b.Property<Guid>("ReplicationID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.ToTable("Promotions_EventBonusing_EventTypes");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Promotions_EventBonusing_Events", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BonusAmount");

                    b.Property<string>("BonusType");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerBalanceTypeID");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<int>("EventTypeID");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("MaximumBonusAwardAmount");

                    b.Property<decimal>("MinimumQualifyingAmount");

                    b.Property<int>("PromotionID");

                    b.Property<int?>("Promotions_EventBonusing_EventTypesID");

                    b.Property<DateTime?>("QualifyByDateTime");

                    b.Property<Guid>("ReplicationID");

                    b.Property<decimal>("SpendMultiplier");

                    b.Property<string>("SpendMultiplierAmountType");

                    b.Property<DateTime?>("StartDateTime");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("CustomerBalanceTypeID");

                    b.HasIndex("Promotions_EventBonusing_EventTypesID");

                    b.ToTable("Promotions_EventBonusing_Events");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AlternatePhone");

                    b.Property<bool?>("CanMakeCustomerDeposits");

                    b.Property<bool?>("CanMakeCustomerWithdraws");

                    b.Property<string>("CellPhone");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<int>("FranchiseID");

                    b.Property<string>("InactiveReason");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsTOTPRequired");

                    b.Property<int?>("JobID");

                    b.Property<string>("LanguageID");

                    b.Property<int?>("LastChangedByStaffID");

                    b.Property<DateTime?>("LastChangedOn");

                    b.Property<string>("LastIPAddress");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastSeenOn");

                    b.Property<DateTime?>("LastSignedInOn");

                    b.Property<int?>("LastTerminalIDUsed");

                    b.Property<int?>("LocationID");

                    b.Property<string>("PINHash");

                    b.Property<string>("PINSalt");

                    b.Property<Guid>("ReplicationID");

                    b.Property<bool>("ResetPasswordOnNextSignIn");

                    b.Property<int?>("Staff_JobsID");

                    b.Property<string>("TOTPUserKey");

                    b.Property<int>("ThemePreference");

                    b.Property<int?>("ThirdPartyID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<Guid?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.HasIndex("Staff_JobsID");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Staff_Job_TransactionTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanReview");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int>("Staff_Job_ID");

                    b.Property<int?>("Staff_JobsID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<int>("TransactionTypeID");

                    b.HasKey("ID");

                    b.HasIndex("Staff_JobsID");

                    b.HasIndex("TransactionTypeID");

                    b.ToTable("Staff_Job_TransactionTypes");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Staff_Jobs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("LastChangedByStaffID");

                    b.Property<DateTime?>("LastChangedOn");

                    b.Property<string>("Name");

                    b.Property<Guid>("ReplicationID");

                    b.Property<bool>("ThirdPartyJob");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.ToTable("Staff_Jobs");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Staff_Sessions", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserDetails");

                    b.Property<DateTime>("DateTimeLastSeen");

                    b.Property<int?>("ForcedOutByStaffID");

                    b.Property<string>("ForcedReason");

                    b.Property<string>("GeoLookupAreaName");

                    b.Property<string>("GeoLookupCountry");

                    b.Property<string>("GeoLookupIdentifier");

                    b.Property<decimal?>("GeoLookupLatitude");

                    b.Property<decimal?>("GeoLookupLongitude");

                    b.Property<string>("HostName");

                    b.Property<string>("IPAddress");

                    b.Property<Guid>("ReplicationID");

                    b.Property<string>("SessionID");

                    b.Property<string>("SignOutType");

                    b.Property<DateTime>("SignedInOn");

                    b.Property<DateTime?>("SignedOutOn");

                    b.Property<int>("StaffID");

                    b.Property<int?>("TerminalID");

                    b.Property<int>("TerminalTypeID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("StaffID");

                    b.ToTable("Staff_Sessions");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangedByStaffID");

                    b.Property<DateTime?>("ChangedOn");

                    b.Property<decimal?>("CostPerShare");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FranchiseID");

                    b.Property<string>("ImageData");

                    b.Property<string>("ImageMimeType");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsFree");

                    b.Property<bool>("IsPromo");

                    b.Property<string>("Name");

                    b.Property<bool>("PerDrawingPeriods");

                    b.Property<Guid>("ReplicationID");

                    b.Property<bool>("RequiresChoosingNumbers");

                    b.Property<bool>("RequiresMerchantShare");

                    b.Property<bool>("ShareBuysAllGames");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.ToTable("Syndicate");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Games", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChangedByStaffID");

                    b.Property<DateTime?>("ChangedOn");

                    b.Property<decimal?>("CostPerShare");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FranchiseID");

                    b.Property<bool>("FullPoolsNotRequired");

                    b.Property<long?>("Games_Lottery_GamesID");

                    b.Property<long>("Games_Lottery_Games_ID");

                    b.Property<string>("InternalName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsFree");

                    b.Property<int?>("LengthOfPrepPhaseDays");

                    b.Property<int>("LinesPerPool");

                    b.Property<int?>("MinPoolSizeForPurchase");

                    b.Property<bool>("PerDrawingPeriods");

                    b.Property<int>("PoolSize");

                    b.Property<Guid>("ReplicationID");

                    b.Property<bool>("RequiresChoosingNumbers");

                    b.Property<bool>("RequiresMerchantShare");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("FranchiseID");

                    b.HasIndex("Games_Lottery_GamesID");

                    b.ToTable("Syndicate_Games");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Games_Link", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DisplayName");

                    b.Property<string>("ImageData");

                    b.Property<string>("ImageMimeType");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int>("SyndicateGameID");

                    b.Property<int>("SyndicateID");

                    b.Property<int?>("Syndicate_GamesID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("SyndicateID");

                    b.HasIndex("Syndicate_GamesID");

                    b.ToTable("Syndicate_Games_Link");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_MediaCodes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("MediaCodeID");

                    b.Property<int?>("Media_CodesID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int>("SyndicateID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Media_CodesID");

                    b.HasIndex("SyndicateID");

                    b.ToTable("Syndicate_MediaCodes");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Orders", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("OrderID");

                    b.Property<long?>("OrdersID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<long>("Syndicate_PoolID");

                    b.Property<long?>("Syndicate_PoolsID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("Syndicate_PoolsID");

                    b.ToTable("Syndicate_Orders");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Periods", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("DrawingID");

                    b.Property<DateTime?>("LastOrderDate");

                    b.Property<DateTime?>("PeriodIntendedDate");

                    b.Property<DateTime?>("PlayPeriodEndDate");

                    b.Property<DateTime?>("PlayPeriodStartDate");

                    b.Property<DateTime?>("PrepPeriodStartDate");

                    b.Property<DateTime?>("PreviousWinningsLastDate");

                    b.Property<long?>("Previous_PeriodID");

                    b.Property<bool>("QueueingComplete");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int>("SyndicateGameID");

                    b.Property<int?>("Syndicate_GamesID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_GamesID");

                    b.ToTable("Syndicate_Periods");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Pool_Details", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("CustomerNotifiedOn");

                    b.Property<DateTime?>("RemovedOn");

                    b.Property<long?>("Removed_Syndicate_QueueID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<long>("Syndicate_PoolID");

                    b.Property<long?>("Syndicate_PoolsID");

                    b.Property<long?>("Syndicate_QueueID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_PoolsID");

                    b.HasIndex("Syndicate_QueueID");

                    b.ToTable("Syndicate_Pool_Details");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Pool_Numbers", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("B1");

                    b.Property<string>("B10");

                    b.Property<string>("B11");

                    b.Property<string>("B12");

                    b.Property<string>("B13");

                    b.Property<string>("B14");

                    b.Property<string>("B15");

                    b.Property<string>("B16");

                    b.Property<string>("B17");

                    b.Property<string>("B18");

                    b.Property<string>("B19");

                    b.Property<string>("B2");

                    b.Property<string>("B20");

                    b.Property<string>("B3");

                    b.Property<string>("B4");

                    b.Property<string>("B5");

                    b.Property<string>("B6");

                    b.Property<string>("B7");

                    b.Property<string>("B8");

                    b.Property<string>("B9");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<string>("SortedBallString");

                    b.Property<long>("Syndicate_PoolID");

                    b.Property<long?>("Syndicate_PoolsID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_PoolsID");

                    b.ToTable("Syndicate_Pool_Numbers");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Pool_Payouts", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ConversionRate");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsPaid");

                    b.Property<DateTime?>("NotifiedOn");

                    b.Property<long>("OrderDetails_Lottery_ID");

                    b.Property<decimal?>("PayoutTotal");

                    b.Property<DateTime?>("ReleasedOn");

                    b.Property<long?>("Released_Syndicate_QueueID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<long>("Syndicate_Order_ID");

                    b.Property<long?>("Syndicate_OrdersID");

                    b.Property<long?>("Syndicate_QueueID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_OrdersID");

                    b.HasIndex("Syndicate_QueueID");

                    b.ToTable("Syndicate_Pool_Payouts");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Pools", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsClosed");

                    b.Property<Guid>("ReplicationID");

                    b.Property<long>("Syndicate_PeriodID");

                    b.Property<long?>("Syndicate_PeriodsID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_PeriodsID");

                    b.ToTable("Syndicate_Pools");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Queue", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BilledOn");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("CustomerAccountID");

                    b.Property<long?>("FailedTransactionID");

                    b.Property<DateTime?>("NotifiedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<long>("Syndicate_PeriodID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<long?>("TransactionID");

                    b.Property<bool>("WasPooled");

                    b.HasKey("ID");

                    b.ToTable("Syndicate_Queue");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Queue_Details", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int>("ShareCount");

                    b.Property<long>("Syndicate_QueueID");

                    b.Property<long>("Syndicate_ShareID");

                    b.Property<long?>("Syndicate_SharesID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_QueueID");

                    b.HasIndex("Syndicate_SharesID");

                    b.ToTable("Syndicate_Queue_Details");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Queue_Numbers", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("B1");

                    b.Property<string>("B10");

                    b.Property<string>("B11");

                    b.Property<string>("B12");

                    b.Property<string>("B13");

                    b.Property<string>("B14");

                    b.Property<string>("B15");

                    b.Property<string>("B16");

                    b.Property<string>("B17");

                    b.Property<string>("B18");

                    b.Property<string>("B19");

                    b.Property<string>("B2");

                    b.Property<string>("B20");

                    b.Property<string>("B3");

                    b.Property<string>("B4");

                    b.Property<string>("B5");

                    b.Property<string>("B6");

                    b.Property<string>("B7");

                    b.Property<string>("B8");

                    b.Property<string>("B9");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<string>("SortedBallString");

                    b.Property<long>("Syndicate_Queue_DetailsID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_Queue_DetailsID");

                    b.ToTable("Syndicate_Queue_Numbers");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Share_Numbers", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("B1");

                    b.Property<string>("B10");

                    b.Property<string>("B11");

                    b.Property<string>("B12");

                    b.Property<string>("B13");

                    b.Property<string>("B14");

                    b.Property<string>("B15");

                    b.Property<string>("B16");

                    b.Property<string>("B17");

                    b.Property<string>("B18");

                    b.Property<string>("B19");

                    b.Property<string>("B2");

                    b.Property<string>("B20");

                    b.Property<string>("B3");

                    b.Property<string>("B4");

                    b.Property<string>("B5");

                    b.Property<string>("B6");

                    b.Property<string>("B7");

                    b.Property<string>("B8");

                    b.Property<string>("B9");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<string>("SortedBallString");

                    b.Property<long>("Syndicate_ShareID");

                    b.Property<long?>("Syndicate_SharesID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_SharesID");

                    b.ToTable("Syndicate_Share_Numbers");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Shares", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CancelAfterPooledCount");

                    b.Property<long?>("CancellationFlagTransactionID");

                    b.Property<DateTime?>("CancellationOccursOn");

                    b.Property<long?>("CancellationRequestTransactionID");

                    b.Property<DateTime?>("CancellationRequestedOn");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("CustomerAccountID");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsPromo");

                    b.Property<DateTime?>("LastBillingSuccess");

                    b.Property<int?>("NextShareCount");

                    b.Property<DateTime?>("NotifiedOn");

                    b.Property<long?>("OrderID");

                    b.Property<DateTime?>("PauseEndDate");

                    b.Property<DateTime?>("PauseStartDate");

                    b.Property<DateTime?>("PurchasedOn");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int>("ShareCount");

                    b.Property<int>("SyndicateGameLinkID");

                    b.Property<int?>("Syndicate_Games_LinkID");

                    b.Property<int?>("Syndicate_Promo_LinkID");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("ID");

                    b.HasIndex("Syndicate_Games_LinkID");

                    b.ToTable("Syndicate_Shares");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Transaction", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount");

                    b.Property<DateTime>("AppliesToDateTime");

                    b.Property<int?>("BankID");

                    b.Property<int?>("CorrectedByStaffID");

                    b.Property<DateTime?>("CorrectedOn");

                    b.Property<long?>("CorrectedTransactionID");

                    b.Property<int?>("CorrectionByStaffID");

                    b.Property<DateTime?>("CorrectionOn");

                    b.Property<long?>("CorrectionTransactionID");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("CustomerBalanceID");

                    b.Property<long?>("CustomerID");

                    b.Property<int?>("CustomerID1");

                    b.Property<long?>("CustomerSessionID");

                    b.Property<int?>("DisbursementCategoryID");

                    b.Property<long?>("DrawingID");

                    b.Property<string>("ExternalGameID");

                    b.Property<string>("ExternalReferenceID");

                    b.Property<string>("ExternalRoundID");

                    b.Property<string>("ExternalSessionID");

                    b.Property<long?>("ExternalTransactionID");

                    b.Property<DateTime?>("ForwardedLastFailedOn");

                    b.Property<DateTime?>("ForwardedSuccessOn");

                    b.Property<bool>("ForwardedToWallet");

                    b.Property<int>("ForwardingFailCount");

                    b.Property<string>("ForwardingIdentifier");

                    b.Property<int>("FranchiseID");

                    b.Property<int?>("GameTypeID");

                    b.Property<bool>("IsCorrected");

                    b.Property<bool>("IsCorrection");

                    b.Property<bool>("IsNeedingReview");

                    b.Property<bool>("IsSystemVoid");

                    b.Property<short?>("JackpotID");

                    b.Property<int?>("LimitID");

                    b.Property<int?>("LocationID");

                    b.Property<DateTime?>("NotifiedOn");

                    b.Property<long?>("OrderDetails_Lottery_ID");

                    b.Property<long?>("OrderID");

                    b.Property<int?>("OrderSourceID");

                    b.Property<int>("PaymentTypeID");

                    b.Property<decimal?>("PostAmount");

                    b.Property<decimal?>("PreAmount");

                    b.Property<int?>("PromotionID");

                    b.Property<int?>("PromotionSubID");

                    b.Property<long?>("RelatedToTransactionID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int?>("ReviewedByStaffID");

                    b.Property<DateTime?>("ReviewedOn");

                    b.Property<int>("StaffID");

                    b.Property<long?>("StaffSessionID");

                    b.Property<decimal>("TaxRate");

                    b.Property<int>("TerminalID");

                    b.Property<int>("ThirdPartyID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<int>("TransactionTypeID");

                    b.Property<int?>("WalletApplicationID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID1");

                    b.HasIndex("FranchiseID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TransactionTypeID");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.TransactionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIName");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CustomerDisplayName");

                    b.Property<string>("DCCustomer");

                    b.Property<string>("DCStaff");

                    b.Property<string>("DCThirdParty");

                    b.Property<string>("InternalNotes");

                    b.Property<bool>("IsCorrectable");

                    b.Property<bool>("IsShownToCustomers");

                    b.Property<bool>("IsShownToStaff");

                    b.Property<string>("Name");

                    b.Property<Guid>("ReplicationID");

                    b.Property<bool>("RequiresFollowUp");

                    b.Property<byte[]>("Timestamp");

                    b.Property<int?>("TransactionTypeGroupID");

                    b.Property<int?>("TranslationID");

                    b.HasKey("ID");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Transactions", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount");

                    b.Property<DateTime>("AppliesToDateTime");

                    b.Property<int?>("BankID");

                    b.Property<int?>("CorrectedByStaffID");

                    b.Property<DateTime?>("CorrectedOn");

                    b.Property<long?>("CorrectedTransactionID");

                    b.Property<int?>("CorrectionByStaffID");

                    b.Property<DateTime?>("CorrectionOn");

                    b.Property<long?>("CorrectionTransactionID");

                    b.Property<int?>("CreatedByStaffID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("CustomerBalanceID");

                    b.Property<long?>("CustomerSessionID");

                    b.Property<int?>("CustomersID");

                    b.Property<int?>("DisbursementCategoryID");

                    b.Property<long?>("DrawingID");

                    b.Property<string>("ExternalGameID");

                    b.Property<string>("ExternalReferenceID");

                    b.Property<string>("ExternalRoundID");

                    b.Property<string>("ExternalSessionID");

                    b.Property<long?>("ExternalTransactionID");

                    b.Property<DateTime?>("ForwardedLastFailedOn");

                    b.Property<DateTime?>("ForwardedSuccessOn");

                    b.Property<bool?>("ForwardedToWallet");

                    b.Property<int>("ForwardingFailCount");

                    b.Property<string>("ForwardingIdentifier");

                    b.Property<int?>("GameTypeID");

                    b.Property<bool>("IsCorrected");

                    b.Property<bool>("IsCorrection");

                    b.Property<bool>("IsNeedingReview");

                    b.Property<bool>("IsSystemVoid");

                    b.Property<short?>("JackpotID");

                    b.Property<int?>("LimitID");

                    b.Property<int?>("LocationID");

                    b.Property<long?>("OrderDetails_Lottery_ID");

                    b.Property<long?>("OrderID");

                    b.Property<int?>("OrderSourceID");

                    b.Property<long?>("OrdersID");

                    b.Property<decimal?>("PostAmount");

                    b.Property<decimal?>("PreAmount");

                    b.Property<int?>("PromotionID");

                    b.Property<int?>("PromotionSubID");

                    b.Property<long?>("RelatedToTransactionID");

                    b.Property<Guid>("ReplicationID");

                    b.Property<int?>("ReviewedByStaffID");

                    b.Property<DateTime?>("ReviewedOn");

                    b.Property<int?>("StaffID");

                    b.Property<long?>("StaffSessionID");

                    b.Property<decimal>("TaxRate");

                    b.Property<int?>("TerminalID");

                    b.Property<int?>("ThirdPartyID");

                    b.Property<byte[]>("Timestamp");

                    b.Property<int?>("TransactionTypesID");

                    b.Property<long?>("Transactions_AdditionalInfoID");

                    b.Property<int?>("WalletApplicationID");

                    b.HasKey("ID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("TransactionTypesID");

                    b.HasIndex("Transactions_AdditionalInfoID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Transactions_AdditionalInfo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ForwardingNotes");

                    b.Property<string>("Notes");

                    b.Property<Guid>("ReplicationID");

                    b.Property<string>("ReviewNotes");

                    b.Property<long?>("TransactionID");

                    b.HasKey("ID");

                    b.HasIndex("TransactionID");

                    b.ToTable("Transactions_AdditionalInfo");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Customer", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Customers")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.CustomerAccount", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Customer", "Customer")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerID1");

                    b.HasOne("SpaBingo.Entities.Lottery.Limit")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("LimitID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.CustomerAccounts_Exclusions", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.CustomerAccount", "CustomerAccount")
                        .WithMany("CustomerAccounts_Exclusions")
                        .HasForeignKey("CustomerAccountID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.CustomerBalance", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.CustomerAccount", "CustomerAccount")
                        .WithMany("CustomerBalances")
                        .HasForeignKey("CustomerAccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.CustomerBalanceType", "CustomerBalanceType")
                        .WithMany("CustomerBalances")
                        .HasForeignKey("CustomerBalanceTypeID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Customer_Billing_Queue_Detail", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.CustomerAccount", "CustomerAccount")
                        .WithMany("Customer_Billing_Queue_Detail")
                        .HasForeignKey("CustomerAccountID");

                    b.HasOne("SpaBingo.Entities.Lottery.Customer_Billing_Queue", "Customer_Billing_Queue")
                        .WithMany("Customer_Billing_Queue_Detail")
                        .HasForeignKey("Customer_Billing_QueueID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Drawing", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Drawings")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.GameType", "GameType")
                        .WithMany("Drawings")
                        .HasForeignKey("GameTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.FormFields_ConfigurationSettings", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("FormFields_ConfigurationSettings")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.GeneralDomain", "GeneralDomain")
                        .WithMany("FormFields_ConfigurationSettings")
                        .HasForeignKey("GeneralDomainID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Franchise", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Limit", "Limit")
                        .WithMany("Franchises")
                        .HasForeignKey("LimitID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_Lottery_BallLimits", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Games_Lottery_BallLimits")
                        .HasForeignKey("FranchiseID");

                    b.HasOne("SpaBingo.Entities.Lottery.Games_Lottery_GameTypes", "Games_Lottery_GameTypes")
                        .WithMany()
                        .HasForeignKey("Games_Lottery_GameTypesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_Lottery_Drawings", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Drawing", "Drawing")
                        .WithMany("Games_Lottery_Drawings")
                        .HasForeignKey("DrawingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Games_Lottery_Drawings_Group", "Games_Lottery_Drawings_Group")
                        .WithMany("Games_Lottery_Drawings")
                        .HasForeignKey("Games_Lottery_Drawings_GroupID");

                    b.HasOne("SpaBingo.Entities.Lottery.Games_Lottery_Games", "Games_Lottery_Games")
                        .WithMany()
                        .HasForeignKey("Games_Lottery_GamesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_Lottery_Games", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Games_Lottery_Games")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Games_Lottery_GameTypes", "Games_Lottery_GameTypes")
                        .WithMany()
                        .HasForeignKey("Games_Lottery_GameTypesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Games_ProgressiveJackpots_Queue", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionID");

                    b.HasOne("SpaBingo.Entities.Lottery.Transactions")
                        .WithMany("Games_ProgressiveJackpots_Queue")
                        .HasForeignKey("TransactionsID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.GeneralDomain", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.GeneralDomain", "GeneralDomain2")
                        .WithMany("GeneralDomain1")
                        .HasForeignKey("GeneralDomain2ID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.LimitDetail", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Limit", "Limit")
                        .WithMany("LimitDetails")
                        .HasForeignKey("LimitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.LimitType", "LimitType")
                        .WithMany("LimitDetails")
                        .HasForeignKey("LimitTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Media_Code_Groups", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Media_Code_Groups")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Media_Codes", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Media_Codes")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Order", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Customer", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomersID");

                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Orders")
                        .HasForeignKey("FranchiseID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.OrderBundle", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("OrderBundles")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.OrderBundle_Detail", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Games_Lottery_Games")
                        .WithMany("OrderBundle_Detail")
                        .HasForeignKey("Games_Lottery_GamesID");

                    b.HasOne("SpaBingo.Entities.Lottery.OrderBundle", "OrderBundle")
                        .WithMany("OrderBundle_Detail")
                        .HasForeignKey("OrderBundleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate")
                        .WithMany("OrderBundle_Detail")
                        .HasForeignKey("SyndicateID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.OrderDetails_Lottery", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Drawing", "Drawing")
                        .WithMany("OrderDetails_Lottery")
                        .HasForeignKey("DrawingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.OrderBundle_Detail", "OrderBundle_Detail")
                        .WithMany()
                        .HasForeignKey("OrderBundle_DetailID");

                    b.HasOne("SpaBingo.Entities.Lottery.Order", "Order")
                        .WithMany("OrderDetails_Lottery")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Orders")
                        .WithMany("OrderDetails_Lottery")
                        .HasForeignKey("OrdersID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.OrderDetails_Product", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.OrderBundle_Detail", "OrderBundle_Detail")
                        .WithMany()
                        .HasForeignKey("OrderBundle_DetailID");

                    b.HasOne("SpaBingo.Entities.Lottery.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate", "Syndicate")
                        .WithMany("OrderDetails_Product")
                        .HasForeignKey("SyndicateID");

                    b.HasOne("SpaBingo.Entities.Lottery.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Orders", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomersID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Promotion_Franchises", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Promotion_Franchises")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Promotion", "Promotion")
                        .WithMany("Promotion_Franchises")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Promotions_EventBonusing_Events", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.CustomerBalanceType", "CustomerBalanceType")
                        .WithMany("Promotions_EventBonusing_Events")
                        .HasForeignKey("CustomerBalanceTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Promotions_EventBonusing_EventTypes", "Promotions_EventBonusing_EventTypes")
                        .WithMany("Promotions_EventBonusing_Events")
                        .HasForeignKey("Promotions_EventBonusing_EventTypesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Staff", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Staffs")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Staff_Jobs", "Staff_Jobs")
                        .WithMany("Staffs")
                        .HasForeignKey("Staff_JobsID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Staff_Job_TransactionTypes", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Staff_Jobs", "Staff_Jobs")
                        .WithMany("Staff_Job_TransactionTypes")
                        .HasForeignKey("Staff_JobsID");

                    b.HasOne("SpaBingo.Entities.Lottery.TransactionType", "TransactionType")
                        .WithMany("Staff_Job_TransactionTypes")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Staff_Sessions", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Staff", "Staff")
                        .WithMany("Staff_Sessions")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Syndicates")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Games", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Syndicate_Games")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Games_Lottery_Games", "Games_Lottery_Games")
                        .WithMany("Syndicate_Games")
                        .HasForeignKey("Games_Lottery_GamesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Games_Link", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate", "Syndicate")
                        .WithMany("Syndicate_Games_Link")
                        .HasForeignKey("SyndicateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Games", "Syndicate_Games")
                        .WithMany("Syndicate_Games_Link")
                        .HasForeignKey("Syndicate_GamesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_MediaCodes", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Media_Codes", "Media_Codes")
                        .WithMany("Syndicate_MediaCodes")
                        .HasForeignKey("Media_CodesID");

                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate", "Syndicate")
                        .WithMany("Syndicate_MediaCodes")
                        .HasForeignKey("SyndicateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Orders", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Order", "Order")
                        .WithMany("Syndicate_Orders")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Orders")
                        .WithMany("Syndicate_Orders")
                        .HasForeignKey("OrdersID");

                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Pools", "Syndicate_Pools")
                        .WithMany("Syndicate_Orders")
                        .HasForeignKey("Syndicate_PoolsID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Periods", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Games", "Syndicate_Games")
                        .WithMany("Syndicate_Periods")
                        .HasForeignKey("Syndicate_GamesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Pool_Details", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Pools", "Syndicate_Pools")
                        .WithMany("Syndicate_Pool_Details")
                        .HasForeignKey("Syndicate_PoolsID");

                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Queue", "Syndicate_Queue")
                        .WithMany("Syndicate_Pool_Details")
                        .HasForeignKey("Syndicate_QueueID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Pool_Numbers", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Pools", "Syndicate_Pools")
                        .WithMany("Syndicate_Pool_Numbers")
                        .HasForeignKey("Syndicate_PoolsID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Pool_Payouts", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Orders", "Syndicate_Orders")
                        .WithMany("Syndicate_Pool_Payouts")
                        .HasForeignKey("Syndicate_OrdersID");

                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Queue", "Syndicate_Queue")
                        .WithMany("Syndicate_Pool_Payouts")
                        .HasForeignKey("Syndicate_QueueID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Pools", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Periods", "Syndicate_Periods")
                        .WithMany("Syndicate_Pools")
                        .HasForeignKey("Syndicate_PeriodsID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Queue_Details", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Queue", "Syndicate_Queue")
                        .WithMany("Syndicate_Queue_Details")
                        .HasForeignKey("Syndicate_QueueID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Shares", "Syndicate_Shares")
                        .WithMany("Syndicate_Queue_Details")
                        .HasForeignKey("Syndicate_SharesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Queue_Numbers", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Queue_Details", "Syndicate_Queue_Details")
                        .WithMany("Syndicate_Queue_Numbers")
                        .HasForeignKey("Syndicate_Queue_DetailsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Share_Numbers", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Shares", "Syndicate_Shares")
                        .WithMany("Syndicate_Share_Numbers")
                        .HasForeignKey("Syndicate_SharesID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Syndicate_Shares", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Syndicate_Games_Link", "Syndicate_Games_Link")
                        .WithMany("Syndicate_Shares")
                        .HasForeignKey("Syndicate_Games_LinkID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Transaction", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerID1");

                    b.HasOne("SpaBingo.Entities.Lottery.Franchise")
                        .WithMany("Transactions")
                        .HasForeignKey("FranchiseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpaBingo.Entities.Lottery.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.HasOne("SpaBingo.Entities.Lottery.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Transactions", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomersID");

                    b.HasOne("SpaBingo.Entities.Lottery.Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderID");

                    b.HasOne("SpaBingo.Entities.Lottery.Orders", "Orders")
                        .WithMany("Transactions")
                        .HasForeignKey("OrdersID");

                    b.HasOne("SpaBingo.Entities.Lottery.TransactionType", "TransactionTypes")
                        .WithMany()
                        .HasForeignKey("TransactionTypesID");

                    b.HasOne("SpaBingo.Entities.Lottery.Transactions_AdditionalInfo", "Transactions_AdditionalInfo")
                        .WithMany()
                        .HasForeignKey("Transactions_AdditionalInfoID");
                });

            modelBuilder.Entity("SpaBingo.Entities.Lottery.Transactions_AdditionalInfo", b =>
                {
                    b.HasOne("SpaBingo.Entities.Lottery.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionID");
                });
#pragma warning restore 612, 618
        }
    }
}
